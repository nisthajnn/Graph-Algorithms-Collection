#include<bits/stdc++.h>
void bfs(unordered_map<int,set<int>>&adj,vector<int>&ans, unordered_map<int,bool>&vis,int node)
{
    queue<int>q;
    q.push(node);
    vis[node]=1;
    while(!q.empty())
    {
        int frontnode=q.front();
        ans.push_back(frontnode);
        q.pop();
        for(auto it:adj[frontnode])
        {
            if(!vis[it])
            {
                q.push(it);
                vis[it]=1;
            }
        }
    }
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    vector<int>ans;
    unordered_map<int,set<int>>adj;             //I am using set because the ansewer is given in sorted order can also use list but some case will not pass
    unordered_map<int,bool>vis;                  //automatic assign false to all integers
    for(int i=0 ; i<edges.size() ; i++)
    {
          int u=edges[i].first;   //or we can write edges[i][0]
          int v=edges[i].second;         //or we can write edges[i][1]
          adj[u].insert(v);
          adj[v].insert(u);
     }
    for(int i=0 ; i<vertex ; i++)
    {
           if(!vis[i])           //it is given that vertex lies between 0 to vertex-1
           {
                bfs(adj,ans,vis,i);
           }
    }
    return ans;
}
