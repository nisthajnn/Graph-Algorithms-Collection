class Solution {
public:
    void dfs(int sr,int sc,int oldcolor,int color,vector<vector<int>>& image)
    {
        if(color==oldcolor)
            return;
       
      if (sr < 0 || sr > image.size() - 1) return;
        if (sc < 0 || sc > image[0].size() - 1) return;
         if(image[sr][sc]!=oldcolor)
        {
              return;
        }
        image[sr][sc]=color;

            dfs(sr,sc-1,oldcolor,color,image);
            dfs(sr+1,sc,oldcolor,color,image);
            dfs(sr,sc+1,oldcolor,color,image);
            dfs(sr-1,sc,oldcolor,color,image);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color)
    {
        
        dfs(sr,sc,image[sr][sc],color,image);
     
        return image;
    }
};


BFS-
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color)
    {
        int oldcolor=image[sr][sc];
        if(oldcolor==color)
            return image;
          queue<pair<int,int>>q;
          q.push(make_pair(sr,sc));
          while(!q.empty())
          {
              int i=q.front().first;
              int j=q.front().second;
              image[sr][sc]=color;
              q.pop();
              if(i>0 and image[i-1][j]==oldcolor)
              {
                  image[i-1][j]=color;
                  q.push(make_pair(i-1,j));
              }
                 if(j>0 and image[i][j-1]==oldcolor)
               {
                   image[i][j-1]=color;
                  q.push(make_pair(i,j-1));
               }
                if(j<image[0].size()-1 and image[i][j+1]==oldcolor)
               {
                   image[i][j+1]=color;
                  q.push(make_pair(i,j+1));
               }
               if(i<image.size()-1 and image[i+1][j]==oldcolor)
               {
                   image[i+1][j]=color;
                  q.push(make_pair(i+1,j));
               }
          }
        return image;
    }
};
