#include<bits/stdc++.h>
void balance(priority_queue<int>&maxi,priority_queue<int, vector<int>, greater<int>>&mini)
{
     if(maxi.size()-mini.size()==2)
   {
       mini.push(maxi.top());
       maxi.pop();
   }
   else if(mini.size()-maxi.size()==1)
   {
      maxi.push(mini.top());
       mini.pop();
   }
  
}
void add(int num,priority_queue<int>&maxi,priority_queue<int, vector<int>, greater<int>>&mini)
{
    if(maxi.empty() or num<=maxi.top())
        maxi.push(num);
    else
    {
        mini.push(num);
    }
        balance(maxi,mini);
}
vector<int> findMedian(vector<int> &arr, int n)
{
	vector<int>ans;
    priority_queue<int>maxi; 
    priority_queue<int, vector<int>, greater<int>> mini; 
    for(int i=0 ; i<n ; i++)
    {
        add(arr[i],maxi,mini);
    if(maxi.size()==mini.size())
        ans.push_back((maxi.top()+mini.top())/2);
    else
        ans.push_back(maxi.top());
    }
	return ans;
}
