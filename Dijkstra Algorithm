#include<bits/stdc++.h>
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source)
{
   unordered_map<int,list<pair<int,int>>>adj;
    for(int i=0 ; i<edges ; i++)
    {
         int u=vec[i][0];
        int v=vec[i][1];
        int w=vec[i][2];
        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }
    vector<int>dist(vertices);
    for(int i=0 ; i<vertices ; i++)
    {
          dist[i]=INT_MAX;
    }
    dist[source]=0;
    set<pair<int,int>>st;
    st.insert(make_pair(0,source));
    while(!st.empty())
    {
       auto top=*(st.begin());
        int dis=top.first;
        int node=top.second;
        st.erase(st.begin());
        for(auto it:adj[node])
        {
            int child=it.first;
            int weight=it.second;
            if(weight+dis<dist[child])
            {
                dist[child]=weight+dis;
                st.insert(make_pair(dist[child],child));
            }
        }
    }
    return dist;
}
