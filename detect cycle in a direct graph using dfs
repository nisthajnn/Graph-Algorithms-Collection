#include<bits/stdc++.h>
bool dfs(int src,unordered_map<int,list<int>>&adj,unordered_map<int,bool>&vis,
         unordered_map<int,bool>&dfsvis)
{
    vis[src]=1;
    dfsvis[src]=1;
    for(auto it:adj[src])
    {
        if(!vis[it])
        {
        bool check=dfs(it,adj,vis,dfsvis);
        if(check)
            return true;
        }
        else if(dfsvis[it])
        {
             return true;
        }
    }
          dfsvis[src]=false;
  
            return false;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges)
{
    unordered_map<int,list<int>>adj;
    for(int i=0 ; i<edges.size() ; i++)
    {
       int u=edges[i].first;
        int v=edges[i].second;
        adj[u].push_back(v);
    }
    unordered_map<int,bool>vis;
    unordered_map<int,bool>dfsvis;
    for(int i=0 ; i<n ; i++)
    {
        if(!vis[i])
        {
            bool ans=dfs(i,adj,vis,dfsvis);
        if(ans==true)
            return 1;
        }
    }
    return false;
}
time=O(N+E)
space=O(n)
