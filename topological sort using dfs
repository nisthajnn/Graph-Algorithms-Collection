#include<bits/stdc++.h>
void dfs(int curr, unordered_map<int,list<int>>&adj, vector<bool>&vis,vector<int>&ans,stack<int>&s)
{
     vis[curr]=true;
     for(auto it:adj[curr])
     {
         if(!vis[it])
         dfs(it,adj,vis,ans,s);
     }
         s.push(curr);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e) 
{
     vector<int>ans;
       stack<int>s;
     unordered_map<int,list<int>>adj;
    vector<bool>vis(v);
    for(int i=0 ; i<e  ; i++)
    {
         int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }
    for(int i=0 ; i<v ; i++)
    {
        if(!vis[i])
            dfs(i,adj,vis,ans,s);
    }
    while(!s.empty())
    {
         int front=s.top();
         ans.push_back(front);
                s.pop();
    }
    return ans;
}
