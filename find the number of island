//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to find the number of islands.
    void  dfs(vector<vector<bool>>&vis,int i,int j,vector<vector<char>>&grid,
    int n,int m)
    {
        if(i<0 || i>n-1 || j<0 || j>m-1 || grid[i][j]=='0' || vis[i][j]==true)
        return;
        vis[i][j]=true;
        dfs(vis,i-1,j-1,grid,n,m);
        dfs(vis,i-1,j,grid,n,m);
        dfs(vis,i-1,j+1,grid,n,m);
        dfs(vis,i,j-1,grid,n,m);
        dfs(vis,i,j+1,grid,n,m);
        dfs(vis,i+1,j-1,grid,n,m);
        dfs(vis,i+1,j,grid,n,m);
        dfs(vis,i+1,j+1,grid,n,m);
    }
    int numIslands(vector<vector<char>>& grid)
    {
         int n=grid.size();
                int m=grid[0].size();
        vector<vector<bool>>vis(n,vector<bool>(m,0));
       

        int ans=0;
        for(int i=0 ; i<grid.size() ; i++)
        {
            for(int j=0 ; j<m ; j++)
            {
            if(!vis[i][j] and grid[i][j]=='1')
            {
                dfs(vis,i,j,grid,n,m);
                ans++;
            }
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends


time=o(n*m) /dfs
space=o(n*m) //visited matrix
