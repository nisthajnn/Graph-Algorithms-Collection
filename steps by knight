//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&pos,vector<int>&tar,int N)
	{
	    int x1=pos[0]-1;
	    int x2=pos[1]-1;
	    int y1=tar[0]-1;
	    int y2=tar[1]-1;
	    vector<vector<int>>a(N,vector<int>(N,0));
	    if(x1==y1 && x2==y2)
	    return 0;
	    queue<pair<int,int>>q;
	    q.push({x1,x2});
	    while(!q.empty())         //considering ghoda is intelligent he knows the right direction
	    {
	        auto cur=q.front();
	        int i=cur.first;
	        int j=cur.second;
	        q.pop();
	        if((i+1)>=0 and (i+1)<N and (j+2)>=0 and (j+2)<N and a[i+1][j+2]==0 ){
                    a[i+1][j+2]=a[i][j]+1;
                    q.push({i+1,j+2});
           }
            if((i-1)>=0 and (i-1)<N and (j+2)>=0 and (j+2)<N and a[i-1][j+2]==0 ){
                    a[i-1][j+2]=a[i][j]+1;
                    q.push({i-1,j+2});
           }
            if((i-2)>=0 and (i-2)<N and (j+1)>=0 and (j+1)<N and a[i-2][j+1]==0 ){
                    a[i-2][j+1]=a[i][j]+1;
                    q.push({i-2,j+1});
           }
            if((i+2)>=0 and (i+2)<N and (j+1)>=0 and (j+1)<N and a[i+2][j+1]==0 ){
                    a[i+2][j+1]=a[i][j]+1;
                    q.push({i+2,j+1});
           }
            if((i-1)>=0 and (i-1)<N and (j-2)>=0 and (j-2)<N and a[i-1][j-2]==0 ){
                    a[i-1][j-2]=a[i][j]+1;
                    q.push({i-1,j-2});
           }
            if((i+1)>=0 and (i+1)<N and (j-2)>=0 and (j-2)<N and a[i+1][j-2]==0 ){
                    a[i+1][j-2]=a[i][j]+1;
                    q.push({i+1,j-2});
           }
            if((i-2)>=0 and (i-2)<N and (j-1)>=0 and (j-1)<N and a[i-2][j-1]==0 ){
                    a[i-2][j-1]=a[i][j]+1;
                    q.push({i-2,j-1});
           }
            if((i+2)>=0 and (i+2)<N and (j-1)>=0 and (j-1)<N and a[i+2][j-1]==0 ){
                    a[i+2][j-1]=a[i][j]+1;
                    q.push({i+2,j-1});
           }
           
       }
	    return a[y1][y2];
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
