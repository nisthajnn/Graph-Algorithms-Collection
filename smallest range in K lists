//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
#define N 1000


// } Driver Code Ends
// you are required to complete this function 
// function should print the required range
class node
{
  public:
  int data;
  int row;
  int col;
  node(int d,int r,int c)
  {
      this->data=d;
      this->row=r;
      this->col=c;
  }
};
class comp
{
    public:
    bool operator()(node* a,node* b)
   {
       return a->data>b->data;
   }
};
class Solution
{
    public:
    pair<int,int> findSmallestRange(int arr[][N], int n, int k)
    {
        int maxi=INT_MIN;
        int mini=INT_MAX;
        priority_queue<node*,vector<node*>,comp>pq;
         for(int i=0 ; i<k ; i++)
         {
             node* temp=new node(arr[i][0],i,0);
            pq.push(temp);
            maxi=max(maxi,arr[i][0]);
            mini=min(mini,arr[i][0]);
         }
         int start=mini;
         int end=maxi;
         while(!pq.empty())
         {
             node* ele=pq.top();
             pq.pop();
             mini=ele->data;
             if(maxi-mini<end-start)
             {
                 start=mini;
                 end=maxi;
             }
             if(ele->col+1<n)
             {
                maxi=max(maxi,arr[ele->row][ele->col+1]);
                node* temp=new node(arr[ele->row][ele->col+1],ele->row,ele->col+1);
                pq.push(temp);
             }
             else
             {
                 break;
             }
         }
         return{start,end};
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, k;
        cin>>n>>k;
        int arr[N][N];
        pair<int,int> rangee;
        for(int i=0; i<k; i++)
            for(int j=0; j<n; j++)
                cin>>arr[i][j];
        Solution obj;
	    rangee = obj.findSmallestRange(arr, n, k);
	    cout<<rangee.first<<" "<<rangee.second<<"\n";
    }   
	return 0;
}


// } Driver Code Ends
